# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

ssh_to_personal_instance() {
  export AWS_PROFILE=personal AWS_DEFAULT_REGION=eu-west-1
  # Returns the first instance created in my personal account
  instance_details=$(
    aws ec2 describe-instances \
      --query 'Reservations[0].Instances[0].{InstanceId: InstanceId, PrivateIP: PrivateIpAddress}' \
      --output text
  )

  instance_id="$(echo $instance_details | awk '{print $1}')"
  instance_ip="$(echo $instance_details | awk '{print $2}')"
  aws ec2 start-instances --instance-ids $instance_id
  set -x
  while true; do nc -z -w 5 -v $instance_ip 22 && break || sleep 2; done
  ssh cnicolov@$instance_ip
  # Stop the instance when I'm ready
  aws ec2 stop-instances --instance-ids $instance_id
}


sdkman() {
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
}

mkfeature() { 
  feature="${1:-}"
  if [[ -z "${feature}" ]]; then
    echo 'You need to specify feature name'
  fi
  export GIT_DIR=${HOME}/kinvey/kim/kim.git
  git fetch origin master
  pushd "${HOME}/kinvey/kim" > /dev/null
  git worktree add "work/$1" master || {
    echo "Feature already exists"
    popd > /dev/null
  }
  unset GIT_DIR
  cd "${HOME}/kinvey/kim/work/$i"
}

custdepprometheus() {
  local tenancy='di'
  if [[ "$2" == "kvy" ]]; then
    tenancy="mt"
  fi
  ssh -v -N -L39090:$1-$2-$tenancy-$3-prometheus-01:39090 $2$3.kinvey.net
}


pre_commit_all_cache_repos () {  # Requires sqlite3
    sqlite3 -column ~/.cache/pre-commit/db.db "SELECT repo, ref, path FROM repos GROUP BY repo ORDER BY ref;"
}

pre_commit_local_cache_repos () {  # Requires PyYaml & sqlite3
  while read repo sha; do
    echo $repo
    sqlite3 ~/.cache/pre-commit/db.db "SELECT ref, path FROM repos WHERE repo = '$repo' AND ref = '$sha';"
    echo
  done <<< "$(python kk.py)"
}

pre_commit_db_rm_repo () {  # Requires sqlite3
    local repo=${1?'Missing parameter'}
    local repo_path=$(sqlite3 ~/.cache/pre-commit/db.db "SELECT path FROM repos WHERE repo = '$repo';")
    if [ -z "$repo_path" ]; then
        echo "No repository known for repo $repo"
        return 1
    fi
    rm -rf "$repo_path"
    sqlite3 ~/.cache/pre-commit/db.db "DELETE FROM repos WHERE repo = '$repo';";
}


